ls -ls
rm -rf
git add -A  -- add everything to staging area

git remote -v

$ git rebase stage
First, rewinding head to replay your work on top of it...
Applying: deleted testfile8.txt@6.11pm
error: Failed to merge in the changes.
Using index info to reconstruct a base tree...
A       DemoProject1/testfile8.txt
Falling back to patching base and 3-way merge...
CONFLICT (rename/delete): DemoProject1/testfile8.txt deleted in deleted testfile8.txt@6.11pm and renamed to DemoProject1/testfile88.txt in HEAD. Version HEAD of DemoProject1/testfile88.txt left in tree.
Patch failed at 0001 deleted testfile8.txt@6.11pm
The copy of the patch that failed is found in: .git/rebase-apply/patch

Resolve all conflicts manually, mark them as resolved with
"git add/rm <conflicted_files>", then run "git rebase --continue".
You can instead skip this commit: run "git rebase --skip".
To abort and get back to the state before "git rebase", run "git rebase --abort".

$ git rebase --skip
Applying: renamed testfile5.txt to testfile55.txt@6.24pm
Applying: renamed testfile4.txt to testfile44.txt@6.26pm
=========================
branching + merging + Conflict handle commands
=========================
$ git commit -am "commiting files alltogether".   -- commits multiple file together
$ git branch demobranch1
$ git branch
$ git checkout demobranch1
$ git merge demobranch1 -- merge
$ git branch -D demobranch1 -- Deleted branch demobranch1 (was f0bcca0).
$ git branch -d demobranch1 -- Delete unmerged branch 
$ git checkout -b demobranch1
$ git fetch -b demobranch1  ??????????
$ git branch --merged
$ git branch --no-merged
$ git branch -v  -- shgow all the brancches as well as last commit
$  git diff master..demobranch
Renaming current branch
$ git branch -m demoBranch011
=========================
Revert commands
=========================
$ git checkout 41df1ac33c -- testfile4.txt
$ git commit -m "Reverting changes in testfile4.txt  @ 2:55PM"

or
$ git checkout 41df1ac33c -- testfile4.txt
$ git reset HEAD testfile4.txt
$ git add .
$ git commit -m "Reverting changes in testfile4.txt  @ 2:55PM"

$ git revert HEAD

$ git reset aCommit
$ git reset --hard xx - bad practice [To Pract]
$ git reset --hard aCommit


undo the changes in staged

[First delete the file from stage] === $ git rm --cached README.txt or $ git rm -f README.txt

[Then reset the file] === $ git reset HEAD README.txt
[Then checkout the file] === $ git checkout README.txt

or
[reset the file to unstage it] === $ git reset HEAD README.txt
[Then checkout the file] === $ git checkout README.txt

============================>>>>>How to undo the changes in local file ================= G:\QA\Tutorials\GIT&GITHUB\Git1\3\Reverting.txt
============================>>>>>How to undo the changes from repository local file ================= G:\QA\Tutorials\GIT&GITHUB\Git1\3\Reverting.txt
============
Move
============
$ git rm --cached Project1
If rename made on local then---$ git mv text04.txt test04.txt

$ git mv Project2/Testt01.txt Project1/Testt01.txt

If rename made on Repository then on status it shows renamed
 $ git mv text04.txt test04.txt
$ git commit -m "commiting test04.txt @5.19pm"

$ git commit -a
[o/p - this command opens editor to mention comment]

[Delete the file]
$ git rm --cached README.txt or $ git rm -f README.txt

============
Detached
============
$ git checkout 40957bc75bf9
$ git branch stage
$ git checkout stage
$ git checkout master

============
Stash
============

$ git status
        modified:   testfile4.txt
no changes added to commit (use "git add" and/or "git commit -a")

$ git checkout demobranch1
error: Your local changes to the following files would be overwritten by checkout:
        DemoProject1/testfile4.txt
Please commit your changes or stash them before you switch branches.
Aborting

$ git stash=====Saved working directory and index state WIP on master: 899bf5e  comiting command.txt@ 3:54am

$ git stash list
stash@{0}: WIP on master: 899bf5e comiting command.txt@ 3:54am
stash@{1}: WIP on master: 899bf5e comiting command.txt@ 3:54am


$ git stash list -p
$ git stash apply  -- commit latest stash

$ git stash apply stash@{1}

$ git stash 

=======
Squash
=======
$ git rebase -i HEAD~3
==========================================================
push an existing repository from the command line
git remote add origin https://github.com/VikashGittt/GitProject301218.git
git push -u origin master

Note: cross branch push not happening may be expected. for example checkout to sgate branch inlocal and push the repo to master branch in repo































